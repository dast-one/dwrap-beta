#!/usr/bin/env python3

"""Validate input options, generate configs for ZAP, and run it
either with shell, or in the docker container.

IN:
    * CLI options, see the reference or run with --help.
    * STDIN: A JSON with Endpoints, Headers, API spec.
OUT:
    * STDOUT: subprocess.run() output
        or an acknowledgement on job started, in JSON format,
        depending on ZAP run method.
"""

import argparse
import json
import shlex
import subprocess
import sys
import uuid
from pathlib import Path

import jinja2
import jsonschema


SCAN_REQUEST_SCH = {"type": "object", "required": ["endpoints"], "additionalProperties": False, "properties": {
    "endpoints": {"type": "array", "minItems": 1,
        "items": {"type": "string"}},
    "headers": {"type": "array",
        "items": {"type": "array", "minItems": 2, "maxItems": 2,
            "prefixItems": [{"type": "string"}, {"type": "string"}]}},
    "oas": {"anyOf": [{"type": "null"}, {"type": "object",
        "properties": {
            "file": {"type": "string"},
            "url": {"type": "string"}},
        "oneOf": [
            {"required": ["file"]},
            {"required": ["url"]}]}]},
    "excludepaths": {"type": "array",
        "items": {"type": "string"}}
}}


## Parse CLI options
parser = argparse.ArgumentParser()
parser.add_argument('-o', '--out-dir', default='.') # default='/zap/wrk'
parser.add_argument('-t', '--templates-dir', default='./templates-zap') # default='/opt/masc/templates-zap'
parser.add_argument('-i', '--scan-request-from-file', default=None, help='Get scan request from JSON-file instead of STDIN.')
parser.add_argument('-x', '--exclude-alert', action='append', default=['10096', '10027'], help='Exclude alerts by pluginid; ref.: https://www.zaproxy.org/docs/alerts/')
parser.add_argument('--job-id', default=str(uuid.uuid1()), help='Set Job Id instead of generated by default')
parser.add_argument('--disable-active-scan', action='store_true', help='Skip ZAP Active scan')
parser.add_argument('--zap-reportfile', default='zap-report', help='Override ZAP report filename (without extension)')
parser.add_argument('--dry-run', action='store_true', help='Prepare configs; do not run scan')
args = parser.parse_args()

if args.scan_request_from_file is None:
    ## Parse STDIN data
    try:
        cfg = json.load(sys.stdin)
        jsonschema.validate(cfg, schema=SCAN_REQUEST_SCH)
    except Exception as e:
        print(type(e).__name__, str(e))
        sys.exit(1)
else:
    try:
        with open(args.scan_request_from_file) as fo:
            cfg = json.load(fo)
        jsonschema.validate(cfg, schema=SCAN_REQUEST_SCH)
    except Exception as e:
        print(type(e).__name__, str(e))
        sys.exit(1)

# Not supported by jockey. Suppressing 'oas' to avoid 'openapi' config section generation.
if 'oas' in cfg:
    del cfg['oas']

cfg['job_id'] = args.job_id

cfg['disable_active_scan'] = args.disable_active_scan

cfg['zap_reportfile'] = args.zap_reportfile

cfg['exclude_alerts'] = args.exclude_alert

# A kind of extra safety-lock, when there are no excludes defined
if not cfg.get('excludepaths'):
    cfg['excludepaths'] = ['.*logout',]

## Feed Jinja templates with the obtained config
jenv = jinja2.Environment(
    loader=jinja2.FileSystemLoader(args.templates_dir),
    trim_blocks=True, lstrip_blocks=True, keep_trailing_newline=True
)
jenv.globals = cfg
for template_file in [
        'zap-af.yaml.j2',      # URLs and API spec. ref. to go there
        'zap-options.cfg.j2',  # (Not parametrized yet)
        'hsendr.py.j2',        # Headers to go there
        ]:
    try:
        if template_rendered := jenv.get_template(template_file).render():
            with open(Path(args.out_dir, Path(template_file).stem), 'w') as fo:
                fo.write(template_rendered)
    except Exception as e:
        print(type(e).__name__, str(e))
        sys.exit(1)

if args.dry_run:
    print(json.dumps(vars(args), indent=4, ensure_ascii=False))
    print(json.dumps(cfg, indent=4, ensure_ascii=False))
    sys.exit(0)

subprocess.run(
    shlex.split('./zap.sh -cmd -autorun /zap/wrk/zap-af.yaml -configfile /zap/wrk/zap-options.cfg')
)
