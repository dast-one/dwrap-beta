"""Validate input options, generate configs for ZAP, and run it.
This script is to be run inside the ZAP's Docker-container.

IN:
    * CLI options, see the reference or run with --help.
    * STDIN: A JSON with Endpoints, Headers, API spec.
OUT:
    * STDOUT: subprocess.run() output
    * 

Docker container is spawned in detached mode.
Its result is to be placed under requested output location.
"""


import argparse
import jinja2
import json
import jsonschema
import requests
import shlex
import shutil
import subprocess
import sys
import uuid
from pathlib import Path


SCAN_REQUEST_SCH = {"type": "object", "required": ["endpoints"], "additionalProperties": False, "properties": {
    "endpoints": {"type": "array",
        "items": {"type": "string"}},
    "headers": {"type": "array",
        "items": {"type": "array", "minItems": 2, "maxItems": 2,
            "prefixItems": [{"type": "string"}, {"type": "string"}]}},
    "oas": {"type": "object",
        "properties": {
            "here": {"type": "string"},
            "file": {"type": "string"}, # TODO/WARN Not supported here, for now
            "url": {"type": "string"}}, # TODO/WARN Not supported here, for now
        "oneOf": [
            {"required": ["here"]},
            {"required": ["file"]}, # TODO/WARN Not supported here, for now
            {"required": ["url"]}]} # TODO/WARN Not supported here, for now
}}


## Parse CLI options
parser = argparse.ArgumentParser()
parser.add_argument('-o', '--out-dir', default='/zap/wrk')
parser.add_argument('-t', '--templates-dir', default='/opt/masc/templates-zap')
parser.add_argument('--job-id', default=str(uuid.uuid1()), help='Set Job Id instead of generated by default')
parser.add_argument('--docker-image', default='zap-plus', help='Override Docker image name')
parser.add_argument('--disable-active-scan', action='store_true', help='Skip ZAP Active scan')
parser.add_argument('--do-not-run', action='store_true', help='Do not run Docker container')
args = parser.parse_args()

## Parse STDIN data
try:
    cfg = json.load(sys.stdin)
    jsonschema.validate(cfg, schema=SCAN_REQUEST_SCH)
except Exception as e:
    print(type(e).__name__, str(e))
    sys.exit(1)

## Copy or download API spec. to the working dir,
## and adjust corresponding config section.
if 'oas' in cfg:
    if cfg['oas'].get('file'):
        shutil.copy(Path(cfg['oas']['file']), Path(args.out_dir))
        cfg['oas'] = {'file': '/zap/wrk/' + Path(cfg['oas']['file']).name}
    elif cfg['oas'].get('url'):
        with open(Path(args.out_dir, 'oas-downloaded.txt'), 'wb') as fo:
            fo.write(requests.get(cfg['oas']['url']).content)
        cfg['oas'] = {'file': '/zap/wrk/oas-downloaded.txt'}

cfg['job_id'] = args.job_id

cfg['disable_active_scan'] = args.disable_active_scan

## Feed Jinja templates with the obtained config
jenv = jinja2.Environment(
    loader=jinja2.FileSystemLoader(args.templates_dir),
    trim_blocks=True, lstrip_blocks=True, keep_trailing_newline=True
)
jenv.globals = cfg
for template_file in [
        'zap-af.yaml.j2',      # URLs and API spec. ref. to go there
        'zap-options.cfg.j2',  # (Not parametrized yet)
        'hsendr.py.j2',        # Headers to go there
        ]:
    try:
        if template_rendered := jenv.get_template(template_file).render():
            with open(Path(args.out_dir, Path(template_file).stem), 'w') as fo:
                fo.write(template_rendered)
    except Exception as e:
        print(type(e).__name__, str(e))
        sys.exit(1)

# ## Container's processes will write to this subdirectory
# Path(args.out_dir, 'out').mkdir(parents=False, exist_ok=True) # TODO: mode 777?

if args.do_not_run:
    sys.exit(0)


subprocess.run(
	shlex.split('./zap.sh -cmd -autorun /zap/wrk/zap-af.yaml -configfile /zap/wrk/zap-options.cfg')
)
